let baseSchema = ../base/schema.dhall

let overlaySchema = ../customizations/schema.dhall

{{range .StatefulSetTuples}}
let applyAddtionalEnv{{.Identifier}}
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
    = λ(base : baseSchema.Type) →
      λ(overlay : overlaySchema.Type) →
        let baseAdditionalEnv =
              base.{{.Component}}.StatefulSet.{{.Name}}.spec.template.spec.containers.{{.ContainerName}}.additionalEnv

        let overlayAdditionalEnv =
              overlay.{{.Component}}.StatefulSet.{{.Name}}.containers.{{.ContainerName}}.additionalEnv

        let finalAdditionalEnv =
              merge {
                        Some = λ(x : List {name : Text, value : Text }) → Some x
                       , None = baseAdditionalEnv
                     }
                 overlayAdditionalEnv

        in  base
          with {{.Component}}.StatefulSet.{{.Name}}.spec.template.spec.containers.{{.ContainerName}}.additionalEnv =
              finalAdditionalEnv
{{end}}

let applyAll
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
        = λ(base : baseSchema.Type) →
          λ(overlay : overlaySchema.Type) →
          let r = base
          {{range .StatefulSetTuples}}
          let r = applyAddtionalEnv{{.Identifier}} r overlay
          {{end}}
          in r

in  applyAll
