{- Generated by dhallie DO NOT EDIT -}

let baseSchema = ../base/schema.dhall

let overlaySchema = ../customizations/schema.dhall

let applyAddtionalEnvf0
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
    = λ(base : baseSchema.Type) →
      λ(overlay : overlaySchema.Type) →
        let baseAdditionalEnv =
              base.Indexed-Search.StatefulSet.indexed-search.spec.template.spec.containers.zoekt-indexserver.additionalEnv

        let overlayAdditionalEnv =
              overlay.Indexed-Search.StatefulSet.indexed-search.containers.zoekt-indexserver.additionalEnv

        let finalAdditionalEnv =
              merge
                { Some = λ(x : List { name : Text, value : Text }) → Some x
                , None = baseAdditionalEnv
                }
                overlayAdditionalEnv

        in  base
          with Indexed-Search.StatefulSet.indexed-search.spec.template.spec.containers.zoekt-indexserver.additionalEnv =
              finalAdditionalEnv

let applyAddtionalEnvf1
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
    = λ(base : baseSchema.Type) →
      λ(overlay : overlaySchema.Type) →
        let baseAdditionalEnv =
              base.Indexed-Search.StatefulSet.indexed-search.spec.template.spec.containers.zoekt-webserver.additionalEnv

        let overlayAdditionalEnv =
              overlay.Indexed-Search.StatefulSet.indexed-search.containers.zoekt-webserver.additionalEnv

        let finalAdditionalEnv =
              merge
                { Some = λ(x : List { name : Text, value : Text }) → Some x
                , None = baseAdditionalEnv
                }
                overlayAdditionalEnv

        in  base
          with Indexed-Search.StatefulSet.indexed-search.spec.template.spec.containers.zoekt-webserver.additionalEnv =
              finalAdditionalEnv

let applyAddtionalEnvf2
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
    = λ(base : baseSchema.Type) →
      λ(overlay : overlaySchema.Type) →
        let baseAdditionalEnv =
              base.Gitserver.StatefulSet.gitserver.spec.template.spec.containers.gitserver.additionalEnv

        let overlayAdditionalEnv =
              overlay.Gitserver.StatefulSet.gitserver.containers.gitserver.additionalEnv

        let finalAdditionalEnv =
              merge
                { Some = λ(x : List { name : Text, value : Text }) → Some x
                , None = baseAdditionalEnv
                }
                overlayAdditionalEnv

        in  base
          with Gitserver.StatefulSet.gitserver.spec.template.spec.containers.gitserver.additionalEnv =
              finalAdditionalEnv

let applyAddtionalEnvf3
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
    = λ(base : baseSchema.Type) →
      λ(overlay : overlaySchema.Type) →
        let baseAdditionalEnv =
              base.Gitserver.StatefulSet.gitserver.spec.template.spec.containers.jaeger-agent.additionalEnv

        let overlayAdditionalEnv =
              overlay.Gitserver.StatefulSet.gitserver.containers.jaeger-agent.additionalEnv

        let finalAdditionalEnv =
              merge
                { Some = λ(x : List { name : Text, value : Text }) → Some x
                , None = baseAdditionalEnv
                }
                overlayAdditionalEnv

        in  base
          with Gitserver.StatefulSet.gitserver.spec.template.spec.containers.jaeger-agent.additionalEnv =
              finalAdditionalEnv

let applyAddtionalEnvf4
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
    = λ(base : baseSchema.Type) →
      λ(overlay : overlaySchema.Type) →
        let baseAdditionalEnv =
              base.Grafana.StatefulSet.grafana.spec.template.spec.containers.grafana.additionalEnv

        let overlayAdditionalEnv =
              overlay.Grafana.StatefulSet.grafana.containers.grafana.additionalEnv

        let finalAdditionalEnv =
              merge
                { Some = λ(x : List { name : Text, value : Text }) → Some x
                , None = baseAdditionalEnv
                }
                overlayAdditionalEnv

        in  base
          with Grafana.StatefulSet.grafana.spec.template.spec.containers.grafana.additionalEnv =
              finalAdditionalEnv

let applyAll
    : baseSchema.Type → overlaySchema.Type → baseSchema.Type
    = λ(base : baseSchema.Type) →
      λ(overlay : overlaySchema.Type) →
        let r = base

        let r = applyAddtionalEnvf0 r overlay

        let r = applyAddtionalEnvf1 r overlay

        let r = applyAddtionalEnvf2 r overlay

        let r = applyAddtionalEnvf3 r overlay

        let r = applyAddtionalEnvf4 r overlay

        in  r

in  applyAll
